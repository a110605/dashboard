{"version":3,"sources":["webpack://harvester-1.4.0//Users/anlee/workspace/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-1.4.0/../../shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-1.4.0//Users/anlee/workspace/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue?4412","webpack://harvester-1.4.0//Users/anlee/workspace/harvester-dashboard/shell/components/formatter/BadgeStateFormatter.vue?53c5","webpack://harvester-1.4.0/./mixins/harvester-vm/impl.js","webpack://harvester-1.4.0/./mixins/harvester-vm/index.js"],"names":["render","_vm","this","_c","_self","arbitrary","value","attrs","stateBackground","stateDisplay","_e","row","staticRenderFns","components","BadgeState","props","type","String","default","Object","required","col","Boolean","data","watch","handler","color","colorForState","replace","immediate","component","QGA_JSON","package_update","packages","runcmd","QGA_MAP","USB_TABLET","bus","name","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","_userDataDoc$contents","_userDataDoc$comment","_userDataDoc$commentB","userDataDoc","YAML","parseDocument","items","contents","exist","comment","includes","commentBefore","map","item","_key$commentBefore","key","getSSHValue","id","_sshs$find","_sshs$find$spec","inStore","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","_vm$metadata","_vm$metadata$labels","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","_dataFormat","_dataFormat$packages","_dataFormat2","_dataFormat2$runcmd","dataFormat","jsyaml","load","e","Error","S","Array","isArray","join","isInstallUSBTablet","_spec$template","_spec$template$spec","_spec$template$spec$d","_spec$template$spec$d2","inputs","template","domain","devices","isEqual","isEfiEnabled","_spec$template2","_spec$template2$spec","_spec$template2$spec$","_spec$template2$spec$2","_spec$template2$spec$3","firmware","bootloader","efi","isTpmEnabled","_spec$template3","_spec$template3$spec","_spec$template3$spec$","_spec$template3$spec$2","tpm","isSecureBoot","_spec$template4","_spec$template4$spec","_spec$template4$spec$","_spec$template4$spec$2","_spec$template4$spec$3","_spec$template4$spec$4","secureBoot","isCpuPinning","_spec$template5","_spec$template5$spec","_spec$template5$spec$","_spec$template5$spec$2","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","_secret$decodedData","_secret$decodedData2","_spec$template6","_spec$template6$spec","_spec$template6$spec$","_spec$template6$spec$2","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","_spec$template7","_spec$template7$spec","_spec$template7$spec$","_spec$template7$spec$2","_cloudInitNoCloud$sec","_cloudInitNoCloud$net","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","_spec$template8","_spec$template8$spec","_spec$template$metada","_spec$template$metada2","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","_c$source","_c$source$source","_c$source$source$secr","source","userPassword","out","username","newPassword","users","sshkeys","keys","propagationMethod","qemuGuestAgent","getRootImageId","_volumes$","_volumes$$metadata","_volumes$$metadata$an","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","_spec$template9","_spec$template9$metad","_spec$template9$metad2","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","_this$convertToJson","ssh_authorized_keys","compareSSHValue","a","b","r","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","_ssh$spec","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","label","CD_ROM","HARD_DISK","mixins","impl","resource","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","_addon$spec","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","reservedMemory","efiEnabled","tpmEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","_n$clusterNetworkReso","clusterNetworkResource","N","isUnSchedulable","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","_node$metadata","_node$metadata$labels","nameDisplay","t","disabled","defaultStorageClass","defaultStorage","isDefault","storageClassSetting","_this$$store$getters$","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","getInitConfig","init","config","_this$value$status","_this$value$status2","_resources$limits","_resources$limits2","_vm$metadata$annotati","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","_this$value$status3","secretBackups","_secretBackups$","_secretBackups$$data","_secretBackups$2","_secretBackups$2$data","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","$set","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","_imageResource$status","_imageResource$status2","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","_volume$persistentVol","_DISK$disk","_DISK$cdrom","_pvc$relatedPV","_pvc$relatedPV$metada","_pvc$relatedPV$metada2","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","_DVT$metadata","_DVT$metadata$annotat","_dataVolumeSpecPVC$ac","_dataVolumeSpecPVC$re","_dataVolumeSpecPVC$re2","_DVT$metadata2","_DVT$metadata2$annota","NEW","dataVolumeSpecPVC","storage","_pvcResource$spec","_pvcResource$spec$acc","_pvcResource$spec2","_pvcResource$spec2$re","_pvcResource$spec2$re2","_pvcResource$spec3","_pvcResource$spec4","_pvcResource$metadata","allPVCs","pvcResource","_volume$persistentVol2","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","_network$multus","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","_this$spec","_this$spec$template","_this$spec2","_this$spec2$template","_this$spec2$template$","_this$spec3","_this$spec3$template","_this$spec3$template$","_this$value","_this$value$metadata2","_this$spec$template2","_this$spec$template3","_this$spec$template3$","_this$spec$template4","_this$spec$template4$","_this$spec$template4$2","diskNameLables","volumeClaimTemplates","R","_this$value$metadata","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","_spec$template$spec2","_spec$template$spec2$","_spec$template$spec3","_spec$template$spec3$","_spec$template$spec3$2","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","_this$spec4","_this$spec4$template","_this$spec4$template$","_this$spec4$template$2","DYNAMIC_SSHKEYS_USERS","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","dump","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","isCollection","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","_YAML$parseDocument$g","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","_doc$getIn","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","_this$$store$getters$2","_this$$store$getters$3","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","_resource$metadata","kind","apiVersion","uid","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","_V$persistentVolumeCl","handlerUSBTablet","_this$spec$template$s","hasExist","assign","$delete","setBootMethod","boot","set","features","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","_this$$refs$yamlEdito","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","old","_neu$","_old$","imageOSType","oldImageId","deep","hasCloudComment","_diff","difference"],"mappings":"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","file":"harvester-1.4.0.umd.min.detail~edit~formatters.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[(_vm.arbitrary)?_c('div',[(_vm.value)?_c('BadgeState',{attrs:{\"color\":_vm.stateBackground,\"label\":_vm.stateDisplay}}):_vm._e()],1):_c('BadgeState',{attrs:{\"value\":_vm.row}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<script>\nimport { BadgeState } from '@components/BadgeState';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nexport default {\n  components: { BadgeState },\n  props:      {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    },\n    col: {\n      type:    Object,\n      default: () => {}\n    },\n\n    arbitrary: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      stateDisplay:    '',\n      stateBackground: ''\n    };\n  },\n\n  watch: {\n    value: {\n      handler() {\n        if (this.arbitrary) {\n          const color = colorForState(this.value);\n\n          this.stateDisplay = stateDisplay(this.value);\n          this.stateBackground = color.replace('text-', 'bg-');\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div v-if=\"arbitrary\">\n      <BadgeState\n        v-if=\"value\"\n        :color=\"stateBackground\"\n        :label=\"stateDisplay\"\n      />\n    </div>\n    <BadgeState\n      v-else\n      :value=\"row\"\n    />\n  </div>\n</template>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--2-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./BadgeStateFormatter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--2-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./BadgeStateFormatter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BadgeStateFormatter.vue?vue&type=template&id=5313d6ee&\"\nimport script from \"./BadgeStateFormatter.vue?vue&type=script&lang=js&\"\nexport * from \"./BadgeStateFormatter.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { OS } from './index';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( O => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find(type => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm ;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find(s => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find(s => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find(ssh => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find(ssh => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find(O => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HCI } from '../../types';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\nimport { uniq } from '@shell/utils/array';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resource: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter(namespace => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map(n => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map(name => vmNetworks.find(n => n.id === name)).filter(n => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map(n => n.clusterNetworkResource?.id));\n\n      return nodes.filter(N => !N.isUnSchedulable).map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    defaultStorageClass() {\n      const defaultStorage = this.$store.getters[`${ this.inStore }/all`](STORAGE_CLASS).find( O => O.isDefault);\n\n      return defaultStorage;\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( O => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || 'Block';\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resource === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( O => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvesterManager.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvesterManager.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvesterManager.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvesterManager.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvesterManager.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resource === HCI.VM ? value : this.resource === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resource === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resource === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this.$set(this, 'spec', spec);\n      this.$set(this, 'maintenanceStrategy', maintenanceStrategy);\n      this.$set(this, 'runStrategy', runStrategy);\n      this.$set(this, 'secretRef', secretRef);\n      this.$set(this, 'accessCredentials', accessCredentials);\n      this.$set(this, 'userScript', userData);\n      this.$set(this, 'networkScript', networkData);\n\n      this.$set(this, 'sshKey', sshKey);\n      this.$set(this, 'osType', osType);\n      this.$set(this, 'installAgent', installAgent);\n\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n      this.$set(this, 'reservedMemory', reservedMemory);\n      this.$set(this, 'machineType', machineType);\n      this.$set(this, 'terminationGracePeriodSeconds', terminationGracePeriodSeconds);\n\n      this.$set(this, 'installUSBTablet', installUSBTablet);\n      this.$set(this, 'efiEnabled', efiEnabled);\n      this.$set(this, 'tpmEnabled', tpmEnabled);\n      this.$set(this, 'secureBoot', secureBoot);\n      this.$set(this, 'cpuPinning', cpuPinning);\n\n      this.$set(this, 'hasCreateVolumes', hasCreateVolumes);\n      this.$set(this, 'networkRows', networkRows);\n      this.$set(this, 'imageId', imageId);\n\n      this.$set(this, 'diskRows', diskRows);\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( I => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find(vBackup => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }Gi`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       'Block',\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( V => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( T => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( O => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || 'Block';\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find(P => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find(vBackup => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }Gi`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( O => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( N => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.$set(this.spec.template.spec.domain, 'machine', { type: this.machineType });\n      } else {\n        this.$set(this.spec.template.spec.domain.machine, 'type', this.machineType);\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resource === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( D => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resource === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.$set(this.value.metadata, 'annotations', {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        });\n\n        this.$set(this.value.metadata, 'labels', {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        });\n\n        this.$set(this.value, 'spec', spec);\n        this.$set(this, 'spec', spec);\n      } else if (this.resource === HCI.VM_VERSION) {\n        this.$set(this.value.spec.vm, 'spec', spec);\n        this.$set(this.value.spec.vm.metadata, 'annotations', { ...this.value.spec.vm.metadata.annotations, [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates) });\n        this.$set(this.value.spec.vm.metadata, 'labels', {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType,\n        });\n        this.$set(this, 'spec', spec);\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.$set(this.spec.template, 'spec', spec);\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decide by the \"Install guest agent\",\n     * \"OS type\", \"SSH Keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this.$set(this, 'sshKey', neu);\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this.$set(this, 'cpu', cpu);\n      this.$set(this, 'memory', memory);\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }Gi`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( I => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( id => this.getSSHValue(id)).filter( O => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( S => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resource === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      // const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find(s => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex(O => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          this.$delete(this.spec.template.spec.domain.devices, 'inputs');\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.$set(this.spec.template.spec.domain.devices, 'inputs', inputs);\n        }\n      }\n    },\n\n    setBootMethod(boot = { efi: false, secureBoot: false }) {\n      if (boot.efi && boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', true);\n      } else if (boot.efi && !boot.secureBoot) {\n        // set(this.spec.template.spec.domain, 'features.smm.enabled', false);\n\n        try {\n          this.$delete(this.spec.template.spec.domain.features.smm, 'enabled');\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            this.$delete(this.spec.template.spec.domain.features, 'smm');\n          }\n        } catch (e) {}\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', false);\n      } else {\n        this.$delete(this.spec.template.spec.domain, 'firmware');\n        this.$delete(this.spec.template.spec.domain.features, 'smm');\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        this.$delete(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement');\n      }\n    },\n\n    setTPM(tpmEnabled) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', {});\n      } else {\n        this.$delete(this.spec.template.spec.domain.devices, 'tpm');\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex(value => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this.$set(this, 'userScript', undefined);\n      } else {\n        this.$set(this, 'userScript', jsyaml.dump(userDataJson));\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this.$set(this, 'reservedMemory', memory);\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this.$set(this, 'terminationGracePeriodSeconds', value);\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( I => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resource !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this.$set(this, 'sshKey', []);\n        this.$set(this, 'userScript', undefined);\n        this.$set(this, 'installAgent', false);\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({ efi: val, secureBoot: this.secureBoot });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({ efi: this.efiEnabled, secureBoot: val });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM(val);\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this.$set(this, 'userScript', out);\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this.$set(this, 'userScript', out);\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      const _diff = difference(old, neu);\n\n      if (_diff.length && this.isEdit) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}