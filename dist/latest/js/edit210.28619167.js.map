{"version":3,"sources":["webpack:///./pkg/harvester/edit/kubevirt.io.virtualmachine/VirtualMachineVolume/type/__tests__/HarvesterEditExisting.test.ts"],"names":["describe","it","wrapper","mount","HarvesterEditExisting","propsData","mode","_EDIT","value","rows","mocks","$store","getters","jest","fn","inputWraps","findAll","expect","toHaveLength","each","field","input","find","concat","newValue","setValue","emitted","skip","trigger","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","select","wrap","_context","prev","next","stop","_x","apply","arguments"],"mappings":"2NAIAA,SAAS,oCAAoC,WAC3CC,GAAG,iCAAiC,WAClC,IAAMC,EAAUC,mBAAMC,aAAuB,CAC3CC,UAAW,CACTC,KAAMC,OAAOC,MAAO,GAAIC,KAAM,IAEhCC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiB,iBAAM,IACvB,SAAiBC,KAAKC,UAMxBC,EAAab,EAAQc,QAAQ,6BAEnCC,OAAOF,GAAYG,aAAa,MAGlCjB,GAAGkB,KAAK,CACN,QADFlB,CAEG,qCAAqC,SAACmB,GACvC,IAAMlB,EAAUC,mBAAMC,aAAuB,CAC3CC,UAAW,CACTC,KAAMC,OAAOC,MAAO,GAAIC,KAAM,IAEhCC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiB,iBAAM,IACvB,SAAiBC,KAAKC,UAKxBO,EAAQnB,EAAQoB,KAAK,2BAADC,OAA6BH,EAAM,OAAME,KAAK,SAClEE,EAAW,IAEjBH,EAAMI,SAASD,GAEfP,OAAOf,EAAQwB,QAAQ,WAAWR,aAAa,MAKjDjB,GAAG0B,KAAKR,KAAK,CACX,QADFlB,CAEG,8CAA8C,SAACmB,GAChD,IAAMlB,EAAUC,mBAAMC,aAAuB,CAC3CC,UAAW,CACTC,KAAMC,OAAOC,MAAO,GAAIC,KAAM,IAEhCC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiB,iBAAM,IACvB,SAAiBC,KAAKC,UAKxBO,EAAQnB,EAAQoB,KAAK,2BAADC,OAA6BH,EAAM,OAAME,KAAK,SAClEE,EAAW,IAEjBH,EAAMI,SAASD,GACfH,EAAMO,QAAQ,QAEdX,OAAOf,EAAQwB,QAAQ,UAAUR,aAAa,MAGhDjB,GAAGkB,KAAK,CACN,OACA,cAFFlB,CAIG,+CAA8C,eAAA4B,EAAAC,eAAAC,IAAAC,MAAE,SAAAC,EAAMb,GAAK,IAAAlB,EAAAgC,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAgBrB,OAfjCpC,EAAUC,mBAAMC,aAAuB,CAC3CC,UAAW,CACTC,KAAMC,OAAOC,MAAO,GAAIC,KAAM,IAEhCC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiB,iBAAM,IACvB,SAAiBC,KAAKC,UAKxBoB,EAAShC,EAAQoB,KAAK,2BAADC,OAA6BH,EAAM,OAE9Dc,EAAOZ,KAAK,UAAUM,QAAQ,SAASQ,EAAAE,KAAA,EACjCpC,EAAQ0B,QAAQ,gBAAe,cAAAQ,EAAAE,KAAA,EAC/BpC,EAAQ0B,QAAQ,iBAAgB,OAEtCX,OAAOf,EAAQwB,QAAQ,WAAWR,aAAa,GAAG,wBAAAkB,EAAAG,UAAAN,OACnD,gBAAAO,GAAA,OAAAX,EAAAY,MAAA,KAAAC,YArBgD","file":"js/edit210.28619167.js","sourcesContent":["import { mount } from '@vue/test-utils';\nimport HarvesterEditExisting from '../existing.vue';\nimport { _EDIT } from '@shell/config/query-params';\n\ndescribe('component: HarvesterEditExisting', () => {\n  it('should display all the inputs', () => {\n    const wrapper = mount(HarvesterEditExisting, {\n      propsData: {\n        mode: _EDIT, value: {}, rows: []\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': () => [],\n            'i18n/t':        jest.fn()\n          }\n        }\n      }\n    });\n\n    const inputWraps = wrapper.findAll('[data-testid^=input-hee-]');\n\n    expect(inputWraps).toHaveLength(5);\n  });\n\n  it.each([\n    'name',\n  ])('should emit an update on %p input', (field) => {\n    const wrapper = mount(HarvesterEditExisting, {\n      propsData: {\n        mode: _EDIT, value: {}, rows: []\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': () => [],\n            'i18n/t':        jest.fn()\n          }\n        }\n      }\n    });\n    const input = wrapper.find(`[data-testid=\"input-hee-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  // TODO: #6179: Restore this test when the input is allowed to edit\n  // eslint-disable-next-line jest/no-disabled-tests\n  it.skip.each([\n    'size',\n  ])('should emit an update on %p input and blur', (field) => {\n    const wrapper = mount(HarvesterEditExisting, {\n      propsData: {\n        mode: _EDIT, value: {}, rows: []\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': () => [],\n            'i18n/t':        jest.fn()\n          }\n        }\n      }\n    });\n    const input = wrapper.find(`[data-testid=\"input-hee-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n    input.trigger('blur');\n\n    expect(wrapper.emitted('input')).toHaveLength(1);\n  });\n\n  it.each([\n    'type',\n    'volumeName',\n    // 'bus',  // disabled\n  ])('should emit an update on %p selection change', async(field) => {\n    const wrapper = mount(HarvesterEditExisting, {\n      propsData: {\n        mode: _EDIT, value: {}, rows: []\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': () => [],\n            'i18n/t':        jest.fn()\n          }\n        }\n      }\n    });\n    const select = wrapper.find(`[data-testid=\"input-hee-${ field }\"]`);\n\n    select.find('button').trigger('click');\n    await wrapper.trigger('keydown.down');\n    await wrapper.trigger('keydown.enter');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n});\n"],"sourceRoot":""}