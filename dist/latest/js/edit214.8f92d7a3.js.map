{"version":3,"sources":["webpack:///./pkg/harvester/edit/kubevirt.io.virtualmachine/VirtualMachineVolume/type/__tests__/HarvesterEditVolume.test.ts"],"names":["describe","it","wrapper","mount","HarvesterEditVolume","propsData","validateRequired","mocks","$store","getters","jest","fn","inputWraps","findAll","expect","toHaveLength","each","field","mode","_EDIT","input","find","concat","newValue","setValue","trigger","emitted","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","select","wrap","_context","prev","next","stop","_x","apply","arguments"],"mappings":"2NAIAA,SAAS,kCAAkC,WACzCC,GAAG,iCAAiC,WAClC,IAAMC,EAAUC,mBAAMC,aAAqB,CACzCC,UAAW,CAAEC,kBAAkB,GAC/BC,MAAW,CACTC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,KACtB,cAAiBD,KAAKC,UAMxBC,EAAaV,EAAQW,QAAQ,6BAEnCC,OAAOF,GAAYG,aAAa,MAGlCd,GAAGe,KAAK,CACN,OACA,QAFFf,CAGG,0CAA0C,SAACgB,GAC5C,IAAMf,EAAUC,mBAAMC,aAAqB,CACzCC,UAAW,CAAEa,KAAMC,OAAOb,kBAAkB,GAC5CC,MAAW,CACTC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,KACtB,cAAiBD,KAAKC,UAKxBS,EAAQlB,EAAQmB,KAAK,2BAADC,OAA6BL,EAAM,OAAMI,KAAK,SAClEE,EAAW,IAEjBH,EAAMI,SAASD,GACfH,EAAMK,QAAQ,QAEdX,OAAOZ,EAAQwB,QAAQ,WAAWX,aAAa,MAGjDd,GAAGe,KAAK,CACN,OACA,OAFFf,CAGG,+CAA8C,eAAA0B,EAAAC,eAAAC,IAAAC,MAAE,SAAAC,EAAMd,GAAK,IAAAf,EAAA8B,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAerB,OAdjClC,EAAUC,mBAAMC,aAAqB,CACzCC,UAAW,CAAEa,KAAMC,OAAOb,kBAAkB,GAC5CC,MAAW,CACTC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,KACtB,cAAiBD,KAAKC,UAKxBqB,EAAS9B,EAAQmB,KAAK,2BAADC,OAA6BL,EAAM,OAE9De,EAAOX,KAAK,UAAUI,QAAQ,SAASS,EAAAE,KAAA,EACjClC,EAAQuB,QAAQ,gBAAe,cAAAS,EAAAE,KAAA,EAC/BlC,EAAQuB,QAAQ,iBAAgB,OAEtCX,OAAOZ,EAAQwB,QAAQ,WAAWX,aAAa,GAAG,wBAAAmB,EAAAG,UAAAN,OACnD,gBAAAO,GAAA,OAAAX,EAAAY,MAAA,KAAAC,YApBgD","file":"js/edit214.8f92d7a3.js","sourcesContent":["import { mount } from '@vue/test-utils';\nimport HarvesterEditVolume from '../volume.vue';\nimport { _EDIT } from '@shell/config/query-params';\n\ndescribe('component: HarvesterEditVolume', () => {\n  it('should display all the inputs', () => {\n    const wrapper = mount(HarvesterEditVolume, {\n      propsData: { validateRequired: true },\n      mocks:     {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n            'i18n/exists':   jest.fn(),\n          }\n        },\n      }\n    });\n\n    const inputWraps = wrapper.findAll('[data-testid^=input-hev-]');\n\n    expect(inputWraps).toHaveLength(4);\n  });\n\n  it.each([\n    'name',\n    'size',\n  ])('should emit an update on %p input blur', (field) => {\n    const wrapper = mount(HarvesterEditVolume, {\n      propsData: { mode: _EDIT, validateRequired: true },\n      mocks:     {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n            'i18n/exists':   jest.fn(),\n          }\n        },\n      }\n    });\n    const input = wrapper.find(`[data-testid=\"input-hev-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n    input.trigger('blur');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  it.each([\n    'type',\n    'bus'\n  ])('should emit an update on %p selection change', async(field) => {\n    const wrapper = mount(HarvesterEditVolume, {\n      propsData: { mode: _EDIT, validateRequired: true },\n      mocks:     {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n            'i18n/exists':   jest.fn(),\n          }\n        },\n      }\n    });\n    const select = wrapper.find(`[data-testid=\"input-hev-${ field }\"]`);\n\n    select.find('button').trigger('click');\n    await wrapper.trigger('keydown.down');\n    await wrapper.trigger('keydown.enter');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n});\n"],"sourceRoot":""}