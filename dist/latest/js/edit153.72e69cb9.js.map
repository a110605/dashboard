{"version":3,"sources":["webpack:///./pkg/harvester/edit/kubevirt.io.virtualmachine/VirtualMachineNetwork/__tests__/HarvesterEditNetwork.test.ts"],"names":["describe","it","each","field","wrapper","mount","HarvesterEditNetwork","propsData","mode","_EDIT","input","find","concat","newValue","setValue","expect","emitted","toHaveLength","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","select","wrap","_context","prev","next","trigger","stop","_x","apply","arguments"],"mappings":"yNAIAA,SAAS,mCAAmC,WAU1CC,GAAGC,KAAK,CACN,QADFD,CAEG,qCAAqC,SAACE,GACvC,IAAMC,EAAUC,mBAAMC,aAAsB,CAAEC,UAAW,CAAEC,KAAMC,UAC3DC,EAAQN,EAAQO,KAAK,2BAADC,OAA6BT,EAAM,OAAMQ,KAAK,SAClEE,EAAW,IAEjBH,EAAMI,SAASD,GAEfE,OAAOX,EAAQY,QAAQ,WAAWC,aAAa,MAGjDhB,GAAGC,KAAK,CACN,QACA,cACA,QAHFD,CAIG,+CAA8C,eAAAiB,EAAAC,eAAAC,IAAAC,MAAE,SAAAC,EAAMnB,GAAK,IAAAC,EAAAmB,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIrB,OAHjCvB,EAAUC,mBAAMC,aAAsB,CAAEC,UAAW,CAAEC,KAAMC,UAC3Dc,EAASnB,EAAQO,KAAK,2BAADC,OAA6BT,EAAM,OAE9DoB,EAAOZ,KAAK,UAAUiB,QAAQ,SAASH,EAAAE,KAAA,EACjCvB,EAAQwB,QAAQ,gBAAe,cAAAH,EAAAE,KAAA,EAC/BvB,EAAQwB,QAAQ,iBAAgB,OAEtCb,OAAOX,EAAQY,QAAQ,WAAWC,aAAa,GAAG,wBAAAQ,EAAAI,UAAAP,OACnD,gBAAAQ,GAAA,OAAAZ,EAAAa,MAAA,KAAAC,YATgD","file":"js/edit153.72e69cb9.js","sourcesContent":["import { mount } from '@vue/test-utils';\nimport HarvesterEditNetwork from '../base.vue';\nimport { _EDIT } from '@shell/config/query-params';\n\ndescribe('component: HarvesterEditNetwork', () => {\n  // eslint-disable-next-line jest/no-commented-out-tests\n  // it('should display all the inputs', () => {\n  //   const wrapper = mount(HarvesterEditNetwork, { propsData: { mode: _EDIT } });\n\n  //   const inputWraps = wrapper.findAll('[data-testid^=input-hen-]');\n\n  //   expect(inputWraps).toHaveLength(5);\n  // });\n\n  it.each([\n    'name',\n  ])('should emit an update on %p input', (field) => {\n    const wrapper = mount(HarvesterEditNetwork, { propsData: { mode: _EDIT } });\n    const input = wrapper.find(`[data-testid=\"input-hen-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  it.each([\n    'model',\n    'networkName',\n    'type',\n  ])('should emit an update on %p selection change', async(field) => {\n    const wrapper = mount(HarvesterEditNetwork, { propsData: { mode: _EDIT } });\n    const select = wrapper.find(`[data-testid=\"input-hen-${ field }\"]`);\n\n    select.find('button').trigger('click');\n    await wrapper.trigger('keydown.down');\n    await wrapper.trigger('keydown.enter');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n});\n"],"sourceRoot":""}