{"version":3,"sources":["webpack:///./pkg/harvester/edit/kubevirt.io.virtualmachine/VirtualMachineVolume/type/__tests__/HarvesterEditVMImage.test.ts"],"names":["describe","it","wrapper","mount","HarvesterEditVMImage","propsData","mode","_CREATE","isVirtualType","newCreateId","validateRequired","idx","mocks","$store","getters","jest","fn","inputWraps","findAll","expect","toHaveLength","each","field","input","find","concat","newValue","setValue","emitted","trigger","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","select","wrap","_context","prev","next","stop","_x","apply","arguments"],"mappings":"yNAIAA,SAAS,mCAAmC,WAC1CC,GAAG,iCAAiC,WAClC,IAAMC,EAAUC,mBAAMC,aAAsB,CAC1CC,UAAW,CACTC,KAAkBC,OAClBC,eAAkB,EAClBC,YAAkB,MAClBC,kBAAkB,EAClBC,IAAkB,GAEpBC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,UAMxBC,EAAaf,EAAQgB,QAAQ,8BAEnCC,OAAOF,GAAYG,aAAa,MAGlCnB,GAAGoB,KAAK,CACN,QADFpB,CAEG,qCAAqC,SAACqB,GACvC,IAAMpB,EAAUC,mBAAMC,aAAsB,CAC1CC,UAAW,CACTC,KAAkBC,OAClBC,eAAkB,EAClBC,YAAkB,MAClBC,kBAAkB,EAClBC,IAAkB,GAEpBC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,UAKxBO,EAAQrB,EAAQsB,KAAK,4BAADC,OAA8BH,EAAM,OAAME,KAAK,SACnEE,EAAW,IAEjBH,EAAMI,SAASD,GAEfP,OAAOjB,EAAQ0B,QAAQ,WAAWR,aAAa,MAGjDnB,GAAGoB,KAAK,CACN,QADFpB,CAEG,0CAA0C,SAACqB,GAC5C,IAAMpB,EAAUC,mBAAMC,aAAsB,CAC1CC,UAAW,CACTC,KAAkBC,OAClBC,eAAkB,EAClBC,YAAkB,MAClBC,kBAAkB,EAClBC,IAAkB,GAEpBC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,UAKxBO,EAAQrB,EAAQsB,KAAK,4BAADC,OAA8BH,EAAM,OAAME,KAAK,SACnEE,EAAW,IAEjBH,EAAMI,SAASD,GACfH,EAAMM,QAAQ,QAEdV,OAAOjB,EAAQ0B,QAAQ,WAAWR,aAAa,MAGjDnB,GAAGoB,KAAK,CACN,OACA,QACA,OAHFpB,CAIG,+CAA8C,eAAA6B,EAAAC,eAAAC,IAAAC,MAAE,SAAAC,EAAMZ,GAAK,IAAApB,EAAAiC,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAoBrB,OAnBjCrC,EAAUC,mBAAMC,aAAsB,CAC1CC,UAAW,CACTC,KAAkBC,OAClBC,eAAkB,EAClBC,YAAkB,MAClBC,kBAAkB,EAClBC,IAAkB,GAEpBC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACP,gBAAiBC,KAAKC,KACtB,SAAiBD,KAAKC,UAKxBmB,EAASjC,EAAQsB,KAAK,4BAADC,OAA8BH,EAAM,OAE/Da,EAAOX,KAAK,UAAUK,QAAQ,SAASQ,EAAAE,KAAA,EACjCrC,EAAQ2B,QAAQ,gBAAe,cAAAQ,EAAAE,KAAA,EAC/BrC,EAAQ2B,QAAQ,iBAAgB,OAEtCV,OAAOjB,EAAQ0B,QAAQ,WAAWR,aAAa,GAAG,wBAAAiB,EAAAG,UAAAN,OACnD,gBAAAO,GAAA,OAAAX,EAAAY,MAAA,KAAAC,YAzBgD","file":"js/edit212.f780a315.js","sourcesContent":["import { mount } from '@vue/test-utils';\nimport HarvesterEditVMImage from '../vmImage.vue';\nimport { _CREATE } from '@shell/config/query-params';\n\ndescribe('component: HarvesterEditVMImage', () => {\n  it('should display all the inputs', () => {\n    const wrapper = mount(HarvesterEditVMImage, {\n      propsData: {\n        mode:             _CREATE,\n        isVirtualType:    false,\n        newCreateId:      '123',\n        validateRequired: true,\n        idx:              1\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n          }\n        },\n      }\n    });\n\n    const inputWraps = wrapper.findAll('[data-testid^=input-hevi-]');\n\n    expect(inputWraps).toHaveLength(5);\n  });\n\n  it.each([\n    'name',\n  ])('should emit an update on %p input', (field) => {\n    const wrapper = mount(HarvesterEditVMImage, {\n      propsData: {\n        mode:             _CREATE,\n        isVirtualType:    false,\n        newCreateId:      '123',\n        validateRequired: true,\n        idx:              1\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n          }\n        },\n      }\n    });\n    const input = wrapper.find(`[data-testid=\"input-hevi-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  it.each([\n    'size',\n  ])('should emit an update on %p input blur', (field) => {\n    const wrapper = mount(HarvesterEditVMImage, {\n      propsData: {\n        mode:             _CREATE,\n        isVirtualType:    false,\n        newCreateId:      '123',\n        validateRequired: true,\n        idx:              1\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n          }\n        },\n      }\n    });\n    const input = wrapper.find(`[data-testid=\"input-hevi-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n    input.trigger('blur');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  it.each([\n    'type',\n    'image',\n    'bus',\n  ])('should emit an update on %p selection change', async(field) => {\n    const wrapper = mount(HarvesterEditVMImage, {\n      propsData: {\n        mode:             _CREATE,\n        isVirtualType:    false,\n        newCreateId:      '123',\n        validateRequired: true,\n        idx:              1\n      },\n      mocks: {\n        $store: {\n          getters: {\n            'harvester/all': jest.fn(),\n            'i18n/t':        jest.fn(),\n          }\n        },\n      }\n    });\n    const select = wrapper.find(`[data-testid=\"input-hevi-${ field }\"]`);\n\n    select.find('button').trigger('click');\n    await wrapper.trigger('keydown.down');\n    await wrapper.trigger('keydown.enter');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n});\n"],"sourceRoot":""}