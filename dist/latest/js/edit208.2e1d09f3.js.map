{"version":3,"sources":["webpack:///./pkg/harvester/edit/kubevirt.io.virtualmachine/VirtualMachineVolume/type/__tests__/HarvesterEditContainer.test.ts"],"names":["describe","it","wrapper","mount","HarvesterEditContainer","propsData","mode","_EDIT","value","inputWraps","findAll","expect","toHaveLength","each","field","input","find","concat","newValue","setValue","emitted","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","select","wrap","_context","prev","next","trigger","stop","_x","apply","arguments"],"mappings":"yNAIAA,SAAS,qCAAqC,WAC5CC,GAAG,iCAAiC,WAClC,IAAMC,EAAUC,mBAAMC,aAAwB,CAAEC,UAAW,CAAEC,KAAMC,OAAOC,MAAO,MAE3EC,EAAaP,EAAQQ,QAAQ,6BAEnCC,OAAOF,GAAYG,aAAa,MAGlCX,GAAGY,KAAK,CACN,OACA,aAFFZ,CAGG,qCAAqC,SAACa,GACvC,IAAMZ,EAAUC,mBAAMC,aAAwB,CAAEC,UAAW,CAAEC,KAAMC,OAAOC,MAAO,MAC3EO,EAAQb,EAAQc,KAAK,2BAADC,OAA6BH,EAAM,OAAME,KAAK,SAClEE,EAAW,IAEjBH,EAAMI,SAASD,GAEfP,OAAOT,EAAQkB,QAAQ,WAAWR,aAAa,MAGjDX,GAAGY,KAAK,CACN,OACA,OAFFZ,CAGG,+CAA8C,eAAAoB,EAAAC,eAAAC,IAAAC,MAAE,SAAAC,EAAMX,GAAK,IAAAZ,EAAAwB,EAAA,OAAAH,IAAAI,MAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIrB,OAHjC5B,EAAUC,mBAAMC,aAAwB,CAAEC,UAAW,CAAEC,KAAMC,OAAOC,MAAO,MAC3EkB,EAASxB,EAAQc,KAAK,2BAADC,OAA6BH,EAAM,OAE9DY,EAAOV,KAAK,UAAUe,QAAQ,SAASH,EAAAE,KAAA,EACjC5B,EAAQ6B,QAAQ,gBAAe,cAAAH,EAAAE,KAAA,EAC/B5B,EAAQ6B,QAAQ,iBAAgB,OAEtCpB,OAAOT,EAAQkB,QAAQ,WAAWR,aAAa,GAAG,wBAAAgB,EAAAI,UAAAP,OACnD,gBAAAQ,GAAA,OAAAZ,EAAAa,MAAA,KAAAC,YATgD","file":"js/edit208.2e1d09f3.js","sourcesContent":["import { mount } from '@vue/test-utils';\nimport HarvesterEditContainer from '../container.vue';\nimport { _EDIT } from '@shell/config/query-params';\n\ndescribe('component: HarvesterEditContainer', () => {\n  it('should display all the inputs', () => {\n    const wrapper = mount(HarvesterEditContainer, { propsData: { mode: _EDIT, value: {} } });\n\n    const inputWraps = wrapper.findAll('[data-testid^=input-hec-]');\n\n    expect(inputWraps).toHaveLength(4);\n  });\n\n  it.each([\n    'name',\n    'container',\n  ])('should emit an update on %p input', (field) => {\n    const wrapper = mount(HarvesterEditContainer, { propsData: { mode: _EDIT, value: {} } });\n    const input = wrapper.find(`[data-testid=\"input-hec-${ field }\"]`).find('input');\n    const newValue = 123;\n\n    input.setValue(newValue);\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n\n  it.each([\n    'type',\n    'bus',\n  ])('should emit an update on %p selection change', async(field) => {\n    const wrapper = mount(HarvesterEditContainer, { propsData: { mode: _EDIT, value: {} } });\n    const select = wrapper.find(`[data-testid=\"input-hec-${ field }\"]`);\n\n    select.find('button').trigger('click');\n    await wrapper.trigger('keydown.down');\n    await wrapper.trigger('keydown.enter');\n\n    expect(wrapper.emitted('update')).toHaveLength(1);\n  });\n});\n"],"sourceRoot":""}